\begin{Verbatim}[commandchars=\\\{\}]
from utils import set\PYGZus{}bit, get\PYGZus{}bit, shift
from args import args\PYGZus{}for\PYGZus{}gen


def lc(args=args\PYGZus{}for\PYGZus{}gen[\PYGZdq{}lc\PYGZdq{}]):
    a = int(args[0])
    c = int(args[1])
    mod = int(args[2])
    x\PYGZus{}n = int(args[3]) 
    while(True):
        x\PYGZus{}n = (x\PYGZus{}n * a + c) \PYGZpc{} mod
        yield x\PYGZus{}n


def add(args=args\PYGZus{}for\PYGZus{}gen[\PYGZdq{}add\PYGZdq{}]):
    mod, k, j = int(args[0]), int(args[1]), int(args[2])
    x = list(map(int, args[3:]))
    i = 55
    while(True):
        val = (x[i\PYGZhy{}k] + x[i\PYGZhy{}j]) \PYGZpc{} mod
        x.append(val)
        i += 1
        yield val



def fp(args=args\PYGZus{}for\PYGZus{}gen[\PYGZdq{}fp\PYGZdq{}]):
    p, w, x = int(args[0]), int(args[4]), int(args[5])
    mask\PYGZus{}w, mask\PYGZus{}p = 0, 0
    list\PYGZus{}par = list(map(int, args[1:4]))
    list\PYGZus{}par.append(0)

    for i in range(w):
        mask\PYGZus{}w = set\PYGZus{}bit(mask\PYGZus{}w, i, 1)
    for i in range(p):
        mask\PYGZus{}p = set\PYGZus{}bit(mask\PYGZus{}p, i, 1)

    while(True):
        cur\PYGZus{}bit = 0
        for i in list\PYGZus{}par:
            cur\PYGZus{}bit \PYGZca{}= get\PYGZus{}bit(x, i)
        x = shift(x, p)
        x = set\PYGZus{}bit(x, 0, cur\PYGZus{}bit)
        x = x \PYGZam{} mask\PYGZus{}p
        yield x \PYGZam{} mask\PYGZus{}w



def lfsr(args=args\PYGZus{}for\PYGZus{}gen[\PYGZdq{}lfsr\PYGZdq{}]):
    s, x, y = len(args[1]), int(args[0], 2), int(args[1], 2)
    while(True):
        current = 0
        for i in range(s):
            current \PYGZca{}= get\PYGZus{}bit(x, i) * get\PYGZus{}bit(y, i)
        y = shift(y, s)
        y = set\PYGZus{}bit(y, 0, current)
        yield y



def nfsr(args=args\PYGZus{}for\PYGZus{}gen[\PYGZdq{}nfsr\PYGZdq{}]):
    r1 = lfsr([args[0], args[3]])
    r2 = lfsr([args[1], args[4]])
    r3 = lfsr([args[2], args[5]])
    w1 = 0
    for i in range(int(args[6])):
        w1 = set\PYGZus{}bit(w1, i, 1)
    while True:
        a = next(r1)
        b = next(r2)
        c = next(r3)
        yield (a \PYGZca{} b + b \PYGZca{} c + c) \PYGZam{} w1

def rc4(args=args\PYGZus{}for\PYGZus{}gen[\PYGZdq{}rc4\PYGZdq{}]):
    k = list(map(int, args[:\PYGZhy{}2]))
    w = int(args[\PYGZhy{}1])
    l = len(k)
    s = [i for i in range(l)]
    j = 0
    for i in range(l):
        j = (j + s[i] + k[i]) \PYGZpc{} l
        s[i], s[j] = s[j], s[i]
    i = 0
    while(True):
        num = 0
        for t in range(w):
            i = (i + 1) \PYGZpc{} l
            j = (j + s[i]) \PYGZpc{} l
            s[i], s[j] = s[j], s[i]
            num = set\PYGZus{}bit(num, t, s[(s[i] + s[j]) \PYGZpc{} l] \PYGZam{} 1)
        yield num

def rsa(args=args\PYGZus{}for\PYGZus{}gen[\PYGZdq{}rsa\PYGZdq{}]):
    n = int(args[0])
    e = int(args[1])
    x = int(args[2])
    w = int(args[3])
    while(True):
        z = 0
        for i in range(w):
            x = x ** e \PYGZpc{} n
            z = set\PYGZus{}bit(z, w \PYGZhy{} i \PYGZhy{} 1, x \PYGZam{} 1)
        yield z

def bbs(args=args\PYGZus{}for\PYGZus{}gen[\PYGZdq{}bbs\PYGZdq{}]):
    p, q = 127, 131
    n = p * q
    x, w = int(args[0]), int(args[1])
    while(True):
        z = 0
        for i in range(w):
            x = x * x \PYGZpc{} n
            z = set\PYGZus{}bit(z, w \PYGZhy{} i \PYGZhy{} 1, x \PYGZam{} 1)
        yield z

def mt(args=args\PYGZus{}for\PYGZus{}gen[\PYGZdq{}mt\PYGZdq{}]):
    p, w, r, q, a, u, s, t, l, b, c = 624, 32, 31, 397, 2567483615, 11, 7, 15, 18, 2636928640, 4022730752
    mod = int(args[0])
    MT = [int(args[1])]
    lower\PYGZus{}mask = (1 \PYGZlt{}\PYGZlt{} r) \PYGZhy{} 1
    upper\PYGZus{}mask = (\PYGZti{}lower\PYGZus{}mask * \PYGZhy{}1) \PYGZam{} w1
    w1 = 0
    ind = p

    for i in range(w):
        w1 = set\PYGZus{}bit(w1, i, 1)

    for i in range(1, p):
        MT.append((MT[i \PYGZhy{} 1] \PYGZca{} (MT[i \PYGZhy{} 1] \PYGZgt{}\PYGZgt{} 30)) + i)

    while(True):
        if (ind \PYGZgt{}= p):
            for i in range(p):
                x = (MT[i] \PYGZam{} upper\PYGZus{}mask) + (MT[(i + 1) \PYGZpc{} p] \PYGZam{} lower\PYGZus{}mask)
                xA = x \PYGZgt{}\PYGZgt{} 1
                if (x \PYGZam{} 1):
                    xA \PYGZca{}= a
                MT[i] = MT[(i + q) \PYGZpc{} p] \PYGZca{} xA
            ind = 0
        y = MT[ind]
        ind += 1
        y \PYGZca{}= (y \PYGZgt{}\PYGZgt{} u)
        y \PYGZca{}= (y \PYGZlt{}\PYGZlt{} s) \PYGZam{} b
        y \PYGZca{}= (y \PYGZlt{}\PYGZlt{} t) \PYGZam{} c
        y \PYGZca{}= (y \PYGZgt{}\PYGZgt{} l)
        yield y \PYGZpc{} mod
\end{Verbatim}
